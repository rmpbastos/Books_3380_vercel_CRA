1 - Create a frontend and server folder

--------------------
--------------------
FRONTEND
--------------------
1 - Set up the front end with Create React App

$ npx create-react-app .

--------------------
2 - Start the React Development Server

- Start the React development server to ensure everything is working:

$ npm start

--------------------
3 - Install Frontend Dependencies

$ npm install axios react-router-dom bootstrap

- Add the following import statement to index.js(frontend) (or App.jsx)
        import 'bootstrap/dist/css/bootstrap.min.css';

--------------------
4 - Edit App.jsx just to check if the deployment works

  const [books, setBooks] = useState([]);

  useEffect(() => {
    // Fetch books from the backend
    axios.get('http://localhost:5000')
      .then(response => {
        setBooks(response.data);
      })
      .catch(error => {
        console.error('There was an error fetching the books!', error);
      });
  }, []);

  
  return (
    <div className="App">
      <h1>Book List</h1>
      {books.length > 0 ? (
        <ul>
          {books.map((book, index) => (
            <li key={index}>
              <strong>Title:</strong> {book.title}<br />
              <strong>Author:</strong> {book.author}<br />
              <strong>Description:</strong> {book.description}
            </li>
          ))}
        </ul>
      ) : (
        <p>No books available.</p>
      )}
    </div>
  );

--------------------
--------------------
BACKEND
--------------------
1 - Set Up the Server with Express

- In the server folder:

$ npm init -y

--------------------
2 - Install Server Dependencies

$ npm install express mongoose cors dotenv nodemon

--------------------
3 - Create server file index.js (copy content)

--------------------
4 - Create the Book model

server/models folder:

- Create file Book.js (copy content)

--------------------
5 - Create vercel.json inside the server folder (copy content)

--------------------
--------------------
DEPLOYMENT
--------------------
To test the deployment early, test it at this point

1 - Deploy the server:
In Vercel:
- Select the repository and change the Project Name to end with -api
- In Root Directory, select server
- Click Deploy

After this deploy, I'll see the json content retrieved from the server

- Copy the URL of the vercel API site

2 - Deploy the Frontend:
In App.jsx:
- Change http://localhost:5000 for the vercel url copied earlier 
(the complete link), ex: https://books-3380-vercel-api.vercel.app  *NO SLASH

In Vercel:
- Create a new project, select the same repository, 
and change the Project Name to end with -frontent
- In Root Directory, select frontend
- Click Deploy

- Copy the URL of the vercel api site
- Paste this URL in index.js, like:
app.use(cors(
    {
        // The frontend URL goes here
        origin: ["https://books-3380-vercel-frontend.vercel.app"],  *NO SLASH
        methods: ["POST", "GET"],
        credentials: true
    }
));

** After this point, the deployment should be working. Continue building the app.
** I can keep using the Vercel api URL in my axios requests and see it working 
locally and live

--------------------
--------------------
1 - Import style.css at index.js(frontend) and comment out other css from this file and App.jsx

2 - Create BookList.jsx inside src/components

3 - Create BookCard.jsx inside src/components
*Push to github and Deploy (change axios url)

4 - Create AddBook.jsx
- Add Route to App.jsx

5 - Create the /add endpoint in index.js(server)
*Push to github and Deploy (change axios url)

6 - Create the /delete endpoint in index.js(server)
*Push to github and Deploy (change axios url)



**IN THE END, make sure all 'http://localhost:5000' were changed by the Vercel backend endpoint at:
- BookList.jsx
- BookCard.jsx
- AddBook.jsx
